package springbook.user.domain.tobispring;


/**
 * DAO
 * DAO - Data Acess Object
 * 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 오브젝트
 *
 * # 1장 오브젝트와 의존관계
 *
 * “스프링은 자바를 기반으로한 기술이다.”
 *
 * 객체지향 프로그래밍이 가능한 언어
 *
 * 객체지향 설계 object oriented design 의 기초와 원칙을 비롯
 *
 * <aside>
 * 💡 DAO
 * DAO ( Data Access Object ) 는 DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 오브젝트를 말한다.
 *
 * </aside>
 *
 * <aside>
 * 💡 자바빈
 * JavaBean 원래 비주얼 툴에서 조작가능한 컴포넌트를 말한다. 자바의 주력 개발 플랫폼이 웹 기반의 엔터프라이즈 방식으로 바뀌며 비주얼 컴포넌트로서 자바빈은 인기를 잃어갔지만,
 * 자바빈의 몇가지 코딩 관례는 JSP 빈, EJB와 같은 표준기술과 자바빈 스타일의 오브젝트를 사용하는 오픈소스 기술을 통해 계속 이어져왔다,
 * 이제는 자바빈이라고하면 비주얼 컴포넌트라기보다는 다음 두가지 관례를 따라 만들어진 오브젝트를 가리킨다
 * 간단히 빈이라고 부르기도한다
 *
 * </aside>
 *
 * - Default 생성자 : 자바빈은 파라미터가 없는 디폴드 생성자를 갖고있어야한다. 틀이나 프레임 워크에서 리플렉션을 이용해 오브젝트를 생성하기 때문에 필요하다.
 * - 프로퍼티 : 자바빈이 노출하는 이름을 가진 속성을 프로퍼티 라고한.
 * - 프로퍼티는 set으로 시작하는 수정자 메소드(setter) 와 get 으로 시작하는 접근자 메소드(getter)를 이용해 수정 또는 조회할수 있다.
 *
 * DAO의 분리
 *
 * 관심사의 분리
 *
 * 분리와 확장을 고려한 설계
 *
 * - 관심사의 분리
 *     - 변화는 대체로 집중되 ㄴ한가지 관심에 대해 일어나지만 작업은 한곳에 집중되지않는 경우가 많다
 *     - 변화가 한번에 한가지 관심에 집중돼서 일어난다면, 우리가 준비해야할 일은 한가지 관심이 한군데에 집중되게 하는것이다.
 *     - 관심이 같은것 끼리 모으고 다른것은 따로 떨어져있게하는것
 *     - 관심이 같은것 끼리는 하나의 객체안으로 또는 친한객체로 모이게 하고, 관심이 다른 것은 가능한 한 따로 떨어져서 서로 영향을 주지않도록 분리하는것
 * - 커넥션 만들기의 추출
 *     - 중복된 코드의 분리
 * - 변경 사항에 대한 검증 : 리팩토링과 테스트
 *     - 기능이 추가되거나 바뀐 것은 없지만  깔끔하고 미래의 변화에 대해 손쉽게 대응 할 수 있는 코드로 바꾸는것, ‘리팩토링’
 *     - 메소드로 중복된 코드를 뽑아내는 것을 리팩토링에서는 메소드 추출 기법이라고 부른다,
 *     - 리팩토링은 객체지향 개발자라면 반드시 익혀야하는 기법
 *
 *     <aside>
 *     💡 리팩토링
 *     리팩토링은 기존의 코드를 외부의 동작방식에는 변화 없이 내부구조를 변경해서 재구성하는 작업 또는 기술을 말한다.
 *     리팩토링을 하면 코드 내부의 설계가 개선되어 코드를 이해하기가 더 편해지고 변화에 효율적으로 대응 할 수 있다. 결국 생산성은 올라가고, 코드의 품질은 높아지며, 유지보스 요ㄴ고하면서도 유연한 제품을 개발할 수 있다.
 *     리팩토링이 절실히 필요한 코드의 특징을 나쁜 냄새라고 부르기도한다.
 *     다표적으로 중복된 코드는 매우 흔하게 발견되는 나쁜냄새다. 이런 코드는 적절한 리팩토링방법을 적용해 나쁜냄새를 제거해줘야한다
 *     리팩토링은 개발자가 직관적으로 수행할 수 있긴 하지만, 본격적으로 적용하자면 학습과 훈련이 필요하다
 *
 *     </aside>
 */
public class User {
    String id;
    String name;
    String password;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
